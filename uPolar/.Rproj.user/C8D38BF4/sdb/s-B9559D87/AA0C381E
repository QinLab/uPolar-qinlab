{
    "collab_server" : "",
    "contents" : "\n#' @title mÎ¼Plot - Visualization tool for time series of microfluidic microscopic images\n#'\n#' @description AN easy-to-use visualizing tool for Microfluidic based microscopy images to monitor cellular events in biomedical time-series data.\n#'\n#' @param time number for each image\n#'\n#' @param total cells number at each image\n#'\n#' @param Individual cell area (set it to zero (0) if area is unavailable)\n#'\n#' @param cell distance from reference point to calculate radius\n#'\n#' @param offset between maximum cell raduis and plolar plot outlayer line (better visualization)\n#'\n#' @param cell area adjustment for over size cells ( better visualization)\n#'\n#' @param Total number of images\n#'\n#' @return  Microfludics Time Series ploar plot (RLS optional)\n#'\n#' @examples format(time_col,obj_col,area_col,dist_col,offset,c.Adjust,num_images)\n#'\n#' @examples   uPolar(1,2,3,4,0,7,391)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(RDocumentation)\nuPloter <- function(time_col,obj_col,area_col,dist_col,offset,c.Adjust,num_images){\n\n  print(\" Load Data  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \")\n  df.name <-  file.choose(new=FALSE)\n\n  #df = read.csv(\" filename + path \")                       # data name by given name and path\n  df = read.csv(df.name)                                    # file by directory\n  df= select(df,\"time_num\",\"total_objs\",\"Est_area\",\"dist\")  #arrange feature in order\n\n\n    ############ Convet Time to Degree (theta ) #############\n    t2d <- function (df, time_col,num_images){\n\n      df$theta = 'NA'\n      dg =0   # initilize degree\n\n      for  (i in 1 : nrow(df)){\n\n        r1  = df[i, ];\n        r2 =  df[i+1, ];\n\n        if (is.na(r2[,time_col])){\n          #if (is.na(r2$time_num)){  # set degree to zero for unavailable data\n\n          df$theta[i] = dg\n          dg = 0\n        }\n        else if (r1[,time_col] < r2[,time_col]){\n          df$theta[i] = dg\n          dg= dg + (360/num_images)   # divid time to degree and add to next degree\n        }\n        else\n          df$theta[i] = dg\n      }\n\n      print(' Step1 : Time converted to degree (theta) >>>>>>>>>>>>>> ')\n      return(df)\n    }\n\n    ##### tronspose row to colunm ###################################################\n    cbind.fill <- function(...) {\n      df.tsps1 <- lapply(list(...),t)\n      df.tsps2 <- lapply(df.tsps1, as.data.frame)\n      return (data.frame(t(rbind.fill(df.tsps2))))\n    }\n\n\n    ######## Convert distance and theta to  order of time for plotly format ########\n    c2r <- function(df,time_col,objs_col,area_col,dist_col,theta_col,num_images ){\n\n      df.row = data.frame()\n      df.obj = data.frame()\n\n      max.r = max(df[,dist_col])        # max raduis\n      min.r = min(df[,dist_col])        # min raduis\n\n\n      if( area_col==0){   # if area colunm is unavailable\n        df.area = 0\n      }\n      else{\n        df.area = df[,area_col]\n      }\n\n      for (k  in 1: num_images){\n\n        df.t = df[df[,time_col]==k,]\n\n        objs = mean(df.t[,objs_col])   # Objects\n        objs = mean(df.t[,objs_col])   # Objects\n        raduis <- df.t[,dist_col]  # Distance\n        theta <-  df.t[,theta_col]       # Angle\n        df1 <- cbind(raduis,theta)\n\n        #df.row = cbind.fill(df.row,df1,fill = NA)              ( use only for rowR pachage)\n        df.row = cbind.fill(df.row,df1)\n        df.obj = rbind(df.obj, objs)\n\n      }\n      #df.row  <- df.row [,-c(1)]     # remove first colunm    ( use only for rowR pachage)\n      df.obj= as.vector(t(df.obj))   # conver object data.frame to vector\n\n      print(' Step2 : Data Converted to Plotly format >>>>>>>>>>>>>> ')\n\n      return (list(v1=df.row,v2=df.obj,v3=df.area, v4=max.r,v5=min.r))\n\n    }\n\n    ######################### Plot Function #########################\n    ipolar <- function (df,off_set,c.Adjust ){\n\n      df.1= df$v1  # raduis and theta\n      df.2= df$v2  # total Object\n      df.3= df$v3  # area\n      max.area = median(df.3)\n      rls=c()\n\n\n      if ( missing(df)){\n        print('missing \"data\" entery')\n        break\n      }\n      else if (missing(off_set)){\n        off_set = 5;\n        print('offset : default (5)')\n      }\n      else if (missing(c.Adjust) | c.Adjust==0 | mean(df.3)==0 & c.Adjust==0  ){\n        c.Adjust = 0;\n        print(' Cell Size : default (5)')\n      }\n      else{\n        print(' Correct Entery')\n      }\n\n      print(' Step3: Preparing for Plot >>>>>>>>>>>>>>>>>>>>>>>>>>>>')\n\n\n      #####################  Generat Polar Plot #####################\n      p <- plot_ly(\n        type = 'scatterpolargl',\n        r = c((df$v5)-30, df$v4+off_set),\n        mode = 'markers_line'\n      )\n\n      ######################## Zero-line Plot ######################\n      p <- add_trace(\n        p,\n        mode= 'lines+markers',\n        r = as.list(rep(0, 360)),\n        theta = c(seq(0, 360, by=1)),\n        line = list(\n          size = 1,\n          color=  'rgb(10,10,10)'  ),\n        marker = list(\n          color = 'rgb(10,10,10)',\n          size = 2,\n          line = list(\n            color = 'black'\n          ),\n          opacity = 0.5\n        )\n      )\n\n      ######################## Distance Plot ######################\n      j = 1\n      k = 2\n\n      for (i in 1:(length(df.1)/2)){\n\n        ################### Adjust Cell Size #########################\n\n        if (c.Adjust==0){\n          cellSize = 5\n        }\n        else{\n          cellSize= df.3[i]/max.area+c.Adjust\n        }\n\n        ####################### Color Condition #####################\n        if(df.2[i] == 0){\n          c=   'rgb(255, 255, 255)'  #     no cell\n        }\n        else if (df.2[i] == 1){\n          c=  'rgb(10, 10, 10)'      #     1 cells\n        }\n        else if (df.2[i] == 2){\n          c=  'rgb(120, 150, 237)'   #    2 cells\n        }\n        else if (df.2[i] == 3){\n          c = 'rgb(219,120,147)'     #     3 cells\n        }\n        else if (df.2[i] == 4 ){\n          c=  'rgb(10, 140, 30)'     #     4 cells\n        }\n        else if (df.2[i] == 5 ){\n          c=  'rgb(148, 10, 180)'    #     5 cells\n        }\n        else {\n          c=  'rgb(220, 180, 10)'    #   above 5 cells\n        }\n\n        p <- add_trace(\n          p,\n          mode= 'lines+markers',\n          r = df.1[,j],\n          theta = df.1[,k],\n          name = paste('Tm:',i,'\\n','Ce:',df.2[i]),  # tm  : Time Frame , Cell : Number of Cells\n          line = list(\n            size = 0.2,\n            color= c),\n          marker = list(\n            color =  c,\n            size = cellSize,\n            line = list(\n              color = c\n            ),\n            opacity = 10,\n            showlegend = F,\n            line = c)\n        )\n\n        if(df.2[i]==1){\n          rls=rbind(rls,i)\n        }\n\n        j <- j + 2\n        k <- k + 2\n\n      }\n\n      ######################## RLS Plot (out layer) ######################\n      # p <- add_trace(\n      #     p,\n      #     mode= 'markers',\n      #     r = as.list(rep(df$v4+off_set, 360)),\n      #     theta = c(rls),\n      #     marker = list(\n      #       color = 'rgb(10,10,10)',\n      #        symbol= \"star\",\n      #       size = 8,\n      #       opacity = 10)\n      #     )\n      ###################################################################\n      print(' Step4: Preparing for layout  >>>>>>>>>>>>>>>>>>>>>>>>>')\n\n      # Plot layout features\n\n      p <- layout(\n        p,\n        title =  paste('--------------------------- :', 0 ),\n        showlegend = T,\n        paper_bgcolor = \"rgb(256, 256, 256)\",  #  outside color\n        polar = list(\n          bgcolor = \"rgb(230, 230, 230)\",     #   polar background color\n          angularaxis = list(\n            tickwidth = 3,\n            linewidth = 2,\n            layer = 'below traces'\n\n          ),\n          radialaxis = list(\n            showline = T,\n            linewidth = 1,\n            tickwidth = 1,\n            gridcolor = 'rgb(256,256,256)',\n            gridwidth = 0.3\n          )\n        )\n      )\n    }\n\n\n      ###############################\n      #######  t2d function Argument :\n\n      # 0 : data\n      # 1 : time col , time colunm number in dataset\n      # 2 : num_images, Number of images to visulize\n\n      df.t2d = t2d(df,1,num_images)\n\n      ###############################\n      ###############  c2r Argument :\n\n\n      # 0 = data , data from t2d function\n      # 1 : time col , time colunm number in dataset\n      # 2 : obj_col, total total cell colunm number in dataset\n      # 3 : area_col, area colunm number in dataset, if the area is unavailabl, set to zero (0 )\n      # 4 : dist_col  distance colunm number in dataset\n      # 5 : theta_col , theta colunm number from t2d function, default set to 5\n      # 6 : num_images, Number of images to visulize\n\n\n      df.c2r <- c2r(df.t2d,1,2,3,4,5,num_images)\n\n\n      ###############################\n      ######  mupolar Argument :\n\n      # 0 : df.c2r, data from c2r function\n      # 1 : offset,  raduis from out-layer ( Default = 0 )\n      # 2 : c.Adjust, cell size to be display with actuall size or if the area is unavailabl, set to zero (0 )\n\n      p<- ipolar(df.c2r,offset,c.Adjust)\n\n      p\n\n}\n############################### How to run the function from here ########################\n##########################################################################################\n#  muPolar Argument :\n\n# 1 : time col , time colunm number in dataset\n# 2 : obj_col, total total cell colunm number in dataset\n# 3 : area_col, area colunm number in dataset, if the area is unavailabl, set to zero (0 )\n# 4 : dist_col  distance colunm number in dataset\n# 5 : offset to ajdust max value of data from out-layer for better data visulization\n# 6 : c.Ajust to adjust cell size if the  data area is available, otherwise set to zero (0)\n# 7 : num_images, Number of images to visulize\n\n#uPloter(1,2,3,4,0,7,391)\n",
    "created" : 1581311602045.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1340524400",
    "id" : "AA0C381E",
    "lastKnownWriteTime" : 1581316028,
    "last_content_update" : 1581316028670,
    "path" : "~/github/uPolar/R/uPolar.R",
    "project_path" : "R/uPolar.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}